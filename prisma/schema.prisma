generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  id                     Int                     @id @default(autoincrement())
  userBadge1_id          Int?
  userBadge2_id          Int?
  userBadge3_id          Int?
  gender                 Gender?
  email                  String                  @unique @db.VarChar(255)
  phoneNumber            String?                 @db.VarChar(40)
  password               String                  @db.VarChar(255)
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  isDeleted              Boolean                 @default(false)
  deletedAt              DateTime?
  inactiveDate           DateTime?               @db.DateTime(6)
  profilePhoto           String?                 @db.VarChar(255)
  level                  Level?
  followerCount          Int                     @default(0)
  followingCount         Int                     @default(0)
  points                 Int                     @default(0)
  ageGroup               AgeGroup?
  job                    Job?
  nickname               String?                 @default("사용자") @db.VarChar(40)
  userBadge1             UserBadge?              @relation("Badge1", fields: [userBadge1_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userBadge2             UserBadge?              @relation("Badge2", fields: [userBadge2_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userBadge3             UserBadge?              @relation("Badge3", fields: [userBadge3_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  challengeLikes         ChallengeLike[]
  challengeScraps         ChallengeScrap[]
  comments               Comment[]
  posts                  Post[]
  postLikes              PostLike[]
  verifications          Verification[]
  userBadges             UserBadge[]
  userCategoryTypes      UserCategoryType[]
  verificationScraps     VerificationScrap[]
  temporaryVerifications TemporaryVerification[]
  challenges             Challenge[]
  userChallenges         UserChallenge[]
  userGoals              UserGoal[]
  alarm                  Alarm[]
  followers              Follow[]                @relation("FollowerRelation")
  followings             Follow[]                @relation("FollowingRelation")
  receivedMessages       Message[]               @relation("ReceivedMessages")
  sentMessages           Message[]               @relation("SentMessages")
  blockingUsers Block[] @relation("BlockerRelation")
  blockedByUsers Block[] @relation("BlockedRelation")
  userBoards             UserBoard[]
  userAgreements         UserAgreement[]
  verificationLikes      VerificationLike[]
  userLevels             UserLevel[]

  @@map("Users")
}

model Keyword {
  id                Int                @id @default(autoincrement())
  name              String?            @db.VarChar(40) @unique
  challengeKeywords ChallengeKeyword[]

  @@map("Keywords")
}

model ChallengeLike {
  id           Int       @id @default(autoincrement())
  user_id      Int
  challenge_id Int
  created_at   DateTime  @default(now()) @db.DateTime(6)
  updated_at   DateTime? @db.DateTime(6)
  user         User      @relation(fields: [user_id], references: [id])
  challenge    Challenge @relation(fields: [challenge_id], references: [id])

  @@map("ChallengeLikes")
}

model ChallengeScrap {
  id           Int       @id @default(autoincrement())
  user_id      Int
  challenge_id Int
  created_at   DateTime  @default(now()) @db.DateTime(6)
  updated_at   DateTime? @db.DateTime(6)
  user         User      @relation(fields: [user_id], references: [id])
  challenge    Challenge @relation(fields: [challenge_id], references: [id])
  @@unique([user_id, challenge_id])
  @@map("ChallengeScraps")
}

model Comment {
  id              Int           @id @default(autoincrement())
  user_id         Int
  post_id         Int?
  verification_id Int?
  content         String?       @db.Text
  created_at      DateTime?     @default(now()) @db.DateTime(6)
  updated_at      DateTime?     @updatedAt @db.DateTime(6)
  anonymous       Boolean       @default(false)
  parent_id       Int?
  selected        Boolean       @default(false)
  user            User          @relation(fields: [user_id], references: [id])
  post            Post?         @relation(fields: [post_id], references: [id])
  verification    Verification? @relation(fields: [verification_id], references: [id])
  parent_comment  Comment?      @relation("CommentReplies", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  child_comment   Comment[]     @relation("CommentReplies")

  @@map("Comments")
}

model UserBoard {
  id      Int     @id @default(autoincrement())
  userId  Int
  boardId Int
  pinned  Boolean @default(false)
  user    User    @relation(fields: [userId], references: [id])
  board   Board   @relation(fields: [boardId], references: [id])

  @@unique([userId, boardId])
  @@map("UserBoard")
}

model Board {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(40)
  description String?     @db.VarChar(255)
  category    Category
  status      Boolean     @default(false)
  posts       Post[]
  userBoards  UserBoard[]

  @@map("Boards")
}

model Post {
  id         Int        @id @default(autoincrement())
  user_id    Int
  board_id   Int
  title      String?    @db.VarChar(100)
  content    String?    @db.VarChar(200)
  anonymous  Boolean?
  created_at DateTime?  @default(now())
  updated_at DateTime?  @updatedAt
  user       User       @relation(fields: [user_id], references: [id])
  board      Board      @relation(fields: [board_id], references: [id])
  comments   Comment[]
  postLikes  PostLike[]

  @@map("Posts")
}

model PostLike {
  id      Int  @id @default(autoincrement())
  user_id Int
  post_id Int
  user    User @relation(fields: [user_id], references: [id])
  post    Post @relation(fields: [post_id], references: [id])

  @@map("PostLikes")
}

model Message {
  id              Int       @id @default(autoincrement())
  receivedUser_id Int
  sendUser_id     Int
  content         String?   @db.Text
  created_at      DateTime? @default(now())
  receivedUser    User      @relation("ReceivedMessages", fields: [receivedUser_id], references: [id])
  sendUser        User      @relation("SentMessages", fields: [sendUser_id], references: [id])

  @@map("Messages")
}

model Verification {
  id                     Int                     @id @default(autoincrement())
  user_id                Int
  userChallenge_id       Int
  verificationType       VerificationType        @map("type")
  photoUrl               String?                 @db.VarChar(255)
  title                  String?                 @db.VarChar(80)
  content                String?                 @db.VarChar(200)
  question               Boolean?
  textUrl                String?                 @db.VarChar(255)
  created_at             DateTime?               @default(now())
  updated_at             DateTime?               @updatedAt
  adoptionComplete       Boolean                 @default(false)
  verificationStatus     VerificationStatus      @map("VerificationStatus")
  likesCount             Int                     @default(0)
  commentsCount          Int                     @default(0)
  scrapsCount            Int                     @default(0)
  user                   User                    @relation(fields: [user_id], references: [id])
  userChallenge          UserChallenge           @relation(fields: [userChallenge_id], references: [id])
  comments               Comment[]
  temporaryVerifications TemporaryVerification[]
  verificationLikes      VerificationLike[]
  VerificationScrap      VerificationScrap[]

  @@map("Verifications")
}

model VerificationLike {
  id              Int          @id @default(autoincrement())
  user_id         Int
  verification_id Int
  user            User         @relation(fields: [user_id], references: [id])
  verification    Verification @relation(fields: [verification_id], references: [id])

  @@unique([user_id, verification_id])
  @@map("VerificationLikes")
}

model KickOut {
  id               Int           @id @default(autoincrement())
  userChallenge_id Int
  challengeType    ChallengeType
  created_at       DateTime?     @default(now())
  userChallenge    UserChallenge @relation(fields: [userChallenge_id], references: [id])

  @@map("KickOuts")
}

model Follow {
  id           Int     @id @default(autoincrement())
  follower_id  Int
  following_id Int
  follower     User    @relation("FollowerRelation", fields: [follower_id], references: [id])
  following    User    @relation("FollowingRelation", fields: [following_id], references: [id])
  alarms       Alarm[] @relation("SenderAlarm")

  @@unique([follower_id, following_id])
  @@map("Follows")
}

model Block {
  id         Int  @id @default(autoincrement())
  blocker_id Int
  blocked_id Int
  created_at DateTime @default(now())

  blocker User @relation("BlockerRelation", fields: [blocker_id], references: [id], onDelete: Cascade)
  blocked User @relation("BlockedRelation", fields: [blocked_id], references: [id], onDelete: Cascade)

  @@unique([blocker_id, blocked_id]) // 동일한 차단 관계가 중복되지 않도록 설정
  @@map("Blocks")
}


model Badge {
  id            Int         @id @default(autoincrement())
  name          String?     @db.VarChar(50)
  icon          String?     @db.VarChar(255)
  obtainedCount Int?
  type          BadgeType?
  userBadges    UserBadge[]
  conditions    Condition[]

  @@map("Badges")
}

model UserBadge {
  id                 Int                  @id @default(autoincrement())
  user_id            Int
  badge_id           Int
  created_at         DateTime?            @default(now())
  updated_at         DateTime?            @updatedAt
  isObtained         Boolean
  user               User                 @relation(fields: [user_id], references: [id])
  badge              Badge                @relation(fields: [badge_id], references: [id])
  userBadge1         User[]               @relation("Badge1")
  userBadge2         User[]               @relation("Badge2")
  userBadge3         User[]               @relation("Badge3")
  userBadgeCondtions UserBadgeCondition[]

  @@map("User_Badge")
}

model FavorType {
  id                Int                @id @default(autoincrement())
  name              String?            @db.VarChar(40)
  userCategoryTypes UserCategoryType[]
}

model UserCategoryType {
  id           Int
  user_id      Int
  category_id  Int
  favorType_id Int
  category     Category
  user         User      @relation(fields: [user_id], references: [id])
  favorType    FavorType @relation(fields: [favorType_id], references: [id])

  @@id([id, user_id, category_id, favorType_id])
  @@map("User_CategoryType")
}

model VerificationScrap {
  id              Int          @id @default(autoincrement())
  user_id         Int
  verification_id Int
  user            User         @relation(fields: [user_id], references: [id])
  verification    Verification @relation(fields: [verification_id], references: [id])

  @@unique([user_id, verification_id])
  @@map("VerificationScraps")
}

model TemporaryVerification {
  id              Int           @id @default(autoincrement())
  user_id         Int
  verification_id Int
  challengeType   ChallengeType
  title           String?       @db.VarChar(80)
  content         String?       @db.VarChar(255)
  created_at      DateTime?     @default(now())
  updated_at      DateTime?     @updatedAt
  user            User          @relation(fields: [user_id], references: [id])
  verification    Verification  @relation(fields: [verification_id], references: [id])

  @@map("TemporaryVerifications")
}

model Challenge {
  id                  Int                @id @default(autoincrement())
  owner_id            Int
  name                String?            @db.VarChar(40)
  type                ChallengeType
  description         String?             @db.VarChar(255)
  challengeImage      String              @db.VarChar(255)
  challengeStatus     ChallengeStatus     @map("status")
  currentParticipants Int?
  maxParticipants     Int?
  verificationType    VerificationType
  rule                String?             @db.Text
  joinDate            DateTime?           @db.DateTime(6)
  endDate             DateTime?           @db.DateTime(6)
  created_at          DateTime?           @db.DateTime(6)
  updated_at          DateTime?           @db.DateTime(6)
  duration            Duration?
  category            Category
  likesCount          Int                @default(0)
  scrapsCount         Int                @default(0)
  user                User               @relation(fields: [owner_id], references: [id])
  challengeLikes      ChallengeLike[]
  challengeScraps      ChallengeScrap[]
  frequencies         Frequency[]
  userChallenges      UserChallenge[]
  challengeKeywords   ChallengeKeyword[]

  @@map("Challenges")
}

model Frequency {
  id             Int                         @id @default(autoincrement())
  challenge_id   Int
  frequencyType  FrequencyType
  frequencyValue FrequencyValue?
  monday         Boolean?       @default(false)
  tuesday        Boolean?       @default(false)
  wednesday      Boolean?       @default(false)
  thursday       Boolean?       @default(false)
  friday         Boolean?       @default(false)
  saturday       Boolean?       @default(false)
  sunday         Boolean?       @default(false)
  challenge      Challenge     @relation(fields: [challenge_id], references: [id])

  @@map("Frequencies")
}

model UserChallenge {
  id              Int             @id @default(autoincrement())
  challenge_id    Int
  user_id         Int
  challengeStatus ChallengeStatus
  joinDate        DateTime?       @db.DateTime(6)
  endDate         DateTime?       @db.DateTime(6)
  verifyCount     Int?
  unverifiedCount Int?
  status          Status          @default(active)
  warn            Int             @default(0)
  owner           Boolean         @default(false)
  challenge       Challenge       @relation(fields: [challenge_id], references: [id])
  user            User            @relation(fields: [user_id], references: [id])
  verification    Verification[]
  kickOuts        KickOut[]

  @@map("User_Challenge")
}

model ChallengeKeyword {
  id           Int
  challenge_id Int
  keyword_id   Int
  challenge    Challenge @relation(fields: [challenge_id], references: [id])
  keyword      Keyword   @relation(fields: [keyword_id], references: [id])

  @@id([id, challenge_id, keyword_id])
  @@map("Challenge_Keyword")
}

model Goal {
  id        Int        @id @default(autoincrement())
  name      Name
  userGoals UserGoal[]

  @@map("Goals")
}

model UserGoal {
  user_id Int
  goal_id Int
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  goal    Goal @relation(fields: [goal_id], references: [id], onDelete: Cascade)

  @@id([user_id, goal_id])
  @@map("User_Goal")
}

model Alarm {
  id          Int       @id @default(autoincrement())
  user_id     Int
  sender_id   Int?
  alarmType   AlarmType
  referenceId Int       @map("reference_id")
  message     String?   @db.VarChar(255)
  isRead      Boolean?
  created_at  DateTime  @default(now())
  title       String    @db.VarChar(120)
  user        User      @relation(fields: [user_id], references: [id])
  sender      Follow?   @relation("SenderAlarm", fields: [sender_id], references: [id])

  @@map("Alarms")
}

model Condition {
  id                  Int                  @id @default(autoincrement())
  badge_id            Int
  description         String?
  badge               Badge                @relation(fields: [badge_id], references: [id])
  userBadgeConditions UserBadgeCondition[]

  @@map("Conditions")
}

model UserBadgeCondition {
  id           Int       @id @default(autoincrement())
  userBadge_id Int
  condition_id Int
  isAchieved   Boolean?
  userBadge    UserBadge @relation(fields: [userBadge_id], references: [id])
  condition    Condition @relation(fields: [condition_id], references: [id])

  @@map("User_Badge_Condition")
}

model EmailVerification {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  verificationCode String
  codeExpires      DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  verified         Boolean  @default(false)
}

model UserAgreement {
  id                    Int      @id @default(autoincrement())
  user_id               Int
  agree_all             Boolean  @default(false) @map("agreeAll")
  terms_of_service      Boolean  @default(false) @map("termsOfService")
  privacy_policy        Boolean  @default(false) @map("privacyPolicy")
  third_party_provision Boolean  @default(false) @map("thirdPartyProvision")
  marketing_and_ads     Boolean  @default(false) @map("marketingAndAds")
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  user                  User     @relation(fields: [user_id], references: [id])

  @@map("UserAgreements")
}
model LevelCondition {
  id         Int         @id @default(autoincrement())
  condition  String
  level      Level
  userLevels UserLevel[]

  @@map("Level_Condition")
}

model UserLevel {
  id               Int            @id @default(autoincrement())
  userId           Int
  levelConditionId Int
  achieved         Boolean        @default(false)
  user             User           @relation(fields: [userId], references: [id])
  levelCondition   LevelCondition @relation(fields: [levelConditionId], references: [id])
}

enum AlarmType {
  follow
  verificationComment
  postComment
  warning
  kickOut
  newVerification
  deadline
}

enum Name {
  health
  diet
  foodControl
  smallGoal
  studyTogether
  makeHabit
  studyRoutine
  buildCapacity
  escape_3
  qualification
}

enum ChallengeType {
  study
  basic
}

enum VerificationType {
  camera
  text
}

enum VerificationStatus {
  certified
  uncertified
}

enum ChallengeStatus {
  open
  ongoing
  completed
}

enum FrequencyType {
  weeklyCount
  specificDays
}

enum Status {
  kick
  active
}

enum Level {
  general
  bronze
  silver
  gold
  master
  challenger
}

enum Gender {
  male
  female
}

enum Job {
  middleHighSchoolStudent
  collegeStudent
  jobSeeker
  officeWorker
  housewife
}

enum AgeGroup {
  teen    @map("10s")
  twenty  @map("20s")
  thirty  @map("30s")
  forty   @map("40s")
  fiftyUp @map("50s+")
}

enum BadgeType {
  category
  type
}

enum Category {
  exercise
  study
  hobby
  jobPreparation
  lifestyle
}

enum Duration {
  week_1
  week_2
  week_3
  month_1
  month_3
  month_6
  year_1
}

enum FrequencyValue {
  everyday
  week_2
  week_3
  week_5
  weekdays
  weekends
}
